sqoop: https://sqoop.apache.org/docs/1.4.7/SqoopUserGuide.html
------------------------------------------------------------------------------------------------
18 feb 2023
Using Sqoop can help us get rid of writing complex Map-Reduce programs. 

Requirement : Linux server operating system (Ubuntu Server) and Docker Engine installed in it.

ways:
1. Virtual Box and Linux OS installed in it
2. AWS EC2 instance and SSH client(MobaXterm) 
-- .pem file is downloaded while creating the instance 


# install docker
https://docs.docker.com/engine/install/ubuntu/

# run cloudera image

---------------------------------
mysql> use retail_db;
mysql> show tables;
mysql> describe categories;
mysql> select * from orders;

----------------------------------------
> sqoop list-databases \
> --connect jdbc:mysql://localhost:3306 \
> --username root \
> --password cloudera

> sqoop list-tables \
> --connect jdbc:mysql://localhost:3306/retail_db \
> --username root \
> --password cloudera \




------------------------------------------------------------------------------------------------
19 feb 2023

aws setup:

1.click EC2
2.instances running
3.select nearest region (here the machine resides and we rent these machines on hourly basis)
4.launch instance
5.name of instance: sqoop
6.base image: ubuntu
7.instance type: t2.xlarge
8.Create key value pair: sqoop
9.allow all network access
10.confiure storage: 100 GB
11.launch instance

--------------------------
open instance -> connect (SSH client:MobaXterm,PuTTY)
open terminal -> change path/directory where .pem file is located and follow the commands provided at above step.

ubuntu terminal will be open (this connects to the machine)
--install docker : https://docs.docker.com/engine/install/ubuntu/
>>docker --version


--terminal connecting sqoop:
>>sudo usermod -aG docker ubuntu (ubuntu is <username>)
>>newgrp docker

--install Cloudera docker image
>>docker ps
>>docker exec -it <containerid> bash (enters into container)

>>sqoop version
>>sqoop list-databases \
>>--connect jdbc:mysql://localhost:3306 \
>>--username root \
>>--password cloudera


--open another terminal and connect mysql :
>>sudo usermod -aG docker ubuntu (ubuntu is <username>)
>>newgrp docker

--install Cloudera docker image

>>mysql -uroot -pcloudera
mysql>>show databases;




------------------------------------------------------------------------------------------------
25 feb 2023

CTRL+L -> clear screen

#target-dir vs warehouse-dir
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--table customers \
--username root \
--password-file file:///sqoop.pwd \
--warehouse-dir /user/dataware             -> creates a dir with the table name (customers in this case) and places the data files here

sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--table customers \
--username root \
--password-file file:///sqoop.pwd \
--target-dir /user/data/customers          -> customers dir is provided manually else the data will be imported in /user/data directory



#importing specific columns:
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table customers \
--target-dir /user/data/customers
--delete-target-dir 
--columns "customer_id,customer_fname,customer_lname"


#importing specific data/rows:
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table customers \
--target-dir /user/data/customers
--delete-target-dir 
--where "customer_id < 100"

sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table customers \
--target-dir /user/data/customers
--delete-target-dir 
--where "customer_state = 'NV'"


#importing all tables of a database in one go
sqoop import-all-tables \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--warehouse-dir /user/dataware             -> creates individual tables dir automatically
--autoreset-to-one-mapper                  -> this parameter creates one split or 1 file for those tables which does not have any primary key


#exclude-tables parameter -> excludes few tables 
sqoop import-all-tables \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--warehouse-dir /user/dataware             -> creates individual tables dir automatically
--autoreset-to-one-mapper                  -> this parameter creates one split or 1 file for those tables which does not have any primary key
--exclude-tables 'orders,products'


#importing data in compressed form (.gz)
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table order_items \
--target-dir /user/data/order_items            
--compress

#-text -> reads compressed/zipped data
>>hdfs dfs -text /user/data/order_items/part-m-00000.gz


#as-sequencefile parameter - another compressed file format
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table orders \
--target-dir /user/data/orders          
--as-sequencefile

>>hdfs dfs -text /user/data/orders/part-m-00000


#as-avrodatafile parameter - another compressed file format
sqoop import \
--connect jdbc:mysql://localhost:3306/retail_db \
--username root \
--password-file file:///sqoop.pwd \
--table products \
--target-dir /user/data/products          
--as-avrodatafile

>>hdfs dfs -text /user/data/products/part-m-00000.avro

------------------------------------------------------------------------------------------------
26 feb 2023

docker exec -it 25 bash

------------------------------------------------------------------------------------------------
